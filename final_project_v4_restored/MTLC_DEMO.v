
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module MTLC_DEMO(

	//////////// CLOCK //////////
	CLOCK_50,
	CLOCK2_50,
	CLOCK3_50,

	//////////// Sma //////////
	SMA_CLKIN,
	SMA_CLKOUT,

	//////////// LED //////////
	LEDG,
	LEDR,

	//////////// KEY //////////
	KEY,

	//////////// EX_IO //////////
	EX_IO,

	//////////// SW //////////
	SW,

	//////////// SEG7 //////////
	HEX0,
	HEX1,
	HEX2,
	HEX3,
	HEX4,
	HEX5,
	HEX6,
	HEX7,

	//////////// LCD //////////
	LCD_BLON,
	LCD_DATA,
	LCD_EN,
	LCD_ON,
	LCD_RS,
	LCD_RW,

	//////////// RS232 //////////
	UART_CTS,
	UART_RTS,
	UART_RXD,
	UART_TXD,

	//////////// PS2 for Keyboard and Mouse //////////
	PS2_CLK,
	PS2_CLK2,
	PS2_DAT,
	PS2_DAT2,

	//////////// SDCARD //////////
	SD_CLK,
	SD_CMD,
	SD_DAT,
	SD_WP_N,

	//////////// VGA //////////
	VGA_B,
	VGA_BLANK_N,
	VGA_CLK,
	VGA_G,
	VGA_HS,
	VGA_R,
	VGA_SYNC_N,
	VGA_VS,

	//////////// Audio //////////
	AUD_ADCDAT,
	AUD_ADCLRCK,
	AUD_BCLK,
	AUD_DACDAT,
	AUD_DACLRCK,
	AUD_XCK,

	//////////// I2C for EEPROM //////////
	EEP_I2C_SCLK,
	EEP_I2C_SDAT,

	//////////// I2C for Audio Tv-Decoder  //////////
	I2C_SCLK,
	I2C_SDAT,

	//////////// Ethernet 0 //////////
	ENET0_GTX_CLK,
	ENET0_INT_N,
	ENET0_LINK100,
	ENET0_MDC,
	ENET0_MDIO,
	ENET0_RST_N,
	ENET0_RX_CLK,
	ENET0_RX_COL,
	ENET0_RX_CRS,
	ENET0_RX_DATA,
	ENET0_RX_DV,
	ENET0_RX_ER,
	ENET0_TX_CLK,
	ENET0_TX_DATA,
	ENET0_TX_EN,
	ENET0_TX_ER,
	ENETCLK_25,

	//////////// Ethernet 1 //////////
	ENET1_GTX_CLK,
	ENET1_INT_N,
	ENET1_LINK100,
	ENET1_MDC,
	ENET1_MDIO,
	ENET1_RST_N,
	ENET1_RX_CLK,
	ENET1_RX_COL,
	ENET1_RX_CRS,
	ENET1_RX_DATA,
	ENET1_RX_DV,
	ENET1_RX_ER,
	ENET1_TX_CLK,
	ENET1_TX_DATA,
	ENET1_TX_EN,
	ENET1_TX_ER,

	//////////// TV Decoder //////////
	TD_CLK27,
	TD_DATA,
	TD_HS,
	TD_RESET_N,
	TD_VS,

	//////////// USB 2.0 OTG //////////
	OTG_ADDR,
	OTG_CS_N,
	OTG_DACK_N,
	OTG_DATA,
	OTG_DREQ,
	OTG_FSPEED,
	OTG_INT,
	OTG_LSPEED,
	OTG_RD_N,
	OTG_RST_N,
	OTG_WE_N,

	//////////// IR Receiver //////////
	IRDA_RXD,
	
//	//////////// EPCS //////////
//	EPCS_ASDO,
//	EPCS_DATA0,
//	EPCS_DCLK,
//	EPCS_NCSO,	

	//////////// SDRAM //////////
	DRAM_ADDR,
	DRAM_BA,
	DRAM_CAS_N,
	DRAM_CKE,
	DRAM_CLK,
	DRAM_CS_N,
	DRAM_DQ,
	DRAM_DQM,
	DRAM_RAS_N,
	DRAM_WE_N,

	//////////// SRAM //////////
	SRAM_ADDR,
	SRAM_CE_N,
	SRAM_DQ,
	SRAM_LB_N,
	SRAM_OE_N,
	SRAM_UB_N,
	SRAM_WE_N,

	//////////// Flash //////////
	FL_ADDR,
	FL_CE_N,
	FL_DQ,
	FL_OE_N,
	FL_RST_N,
	FL_RY,
	FL_WE_N,
	FL_WP_N,

	//HMSC, HSMC connect to MTLC
	//MTL
	LCD_B,
	LCD_DCLK,
	LCD_G,
	LCD_HSD,
	TOUCH_I2C_SCL,
	TOUCH_I2C_SDA,
	TOUCH_INT_n,
	LCD_R,
	LCD_VSD,
	
	LCD_DITH,
	LCD_MODE,
	LCD_POWER_CTL,
	LCD_UPDN,
	LCD_RSTB,
	LCD_DE,
	LCD_SHLR,
	LCD_DIM,
	
	//D5M
	CAMERA_LVAL,
	CAMERA_PIXCLK,
	CAMERA_RESET_n,
	CAMERA_SCLK,
	CAMERA_SDATA,
	CAMERA_STROBE,
	CAMERA_TRIGGER,
	CAMERA_XCLKIN,
	CAMERA_D,
	CAMERA_FVAL,
	//LIGHT SENSOR
	LSENSOR_ADDR_SEL,
	LSENSOR_SCL,
	LSENSOR_SDA,
	LSENSOR_INT,
	//G_Sensor
	GSENSOR_CS_n,
	GSENSOR_INT1,
	GSENSOR_INT2,
	GSENSOR_ALT_ADDR,
	GSENSOR_SDA_SDI_SDIO,
	GSENSOR_SCL_SCLK
);

//=======================================================
//  PARAMETER declarations
//=======================================================
parameter	BUFFER_SIZE          =	192000; // 800*480/2
parameter	HOR_SIZE             =	400;    // 800/2
parameter	HOR_PITCH            =	80;
parameter	WR_LENGTH            =	8'd80;
parameter	RD_LENGTH            =	8'd80;


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;
input 		          		CLOCK2_50;
input 		          		CLOCK3_50;

//////////// Sma //////////
input 		          		SMA_CLKIN;
output		          		SMA_CLKOUT;

//////////// LED //////////
output		     [8:0]		LEDG;
output		    [17:0]		LEDR;

//////////// KEY //////////
input 		     [3:0]		KEY;

//////////// EX_IO //////////
inout 		     [6:0]		EX_IO;

//////////// SW //////////
input 		    [17:0]		SW;

//////////// SEG7 //////////
output		     [6:0]		HEX0;
output		     [6:0]		HEX1;
output		     [6:0]		HEX2;
output		     [6:0]		HEX3;
output		     [6:0]		HEX4;
output		     [6:0]		HEX5;
output		     [6:0]		HEX6;
output		     [6:0]		HEX7;

//////////// LCD //////////
output		          		LCD_BLON;
inout 		     [7:0]		LCD_DATA;
output		          		LCD_EN;
output		          		LCD_ON;
output		          		LCD_RS;
output		          		LCD_RW;

//////////// RS232 //////////
output		          		UART_CTS;
input 		          		UART_RTS;
input 		          		UART_RXD;
output		          		UART_TXD;

//////////// PS2 for Keyboard and Mouse //////////
inout 		          		PS2_CLK;
inout 		          		PS2_CLK2;
inout 		          		PS2_DAT;
inout 		          		PS2_DAT2;

//////////// SDCARD //////////
output		          		SD_CLK;
inout 		          		SD_CMD;
inout 		     [3:0]		SD_DAT;
input 		          		SD_WP_N;

//////////// VGA //////////
output		     [7:0]		VGA_B;
output		          		VGA_BLANK_N;
output		          		VGA_CLK;
output		     [7:0]		VGA_G;
output		          		VGA_HS;
output		     [7:0]		VGA_R;
output		          		VGA_SYNC_N;
output		          		VGA_VS;

//////////// Audio //////////
input 		          		AUD_ADCDAT;
inout 		          		AUD_ADCLRCK;
inout 		          		AUD_BCLK;
output		          		AUD_DACDAT;
inout 		          		AUD_DACLRCK;
output		          		AUD_XCK;

//////////// I2C for EEPROM //////////
output		          		EEP_I2C_SCLK;
inout 		          		EEP_I2C_SDAT;

//////////// I2C for Audio Tv-Decoder  //////////
output		          		I2C_SCLK;
inout 		          		I2C_SDAT;

//////////// Ethernet 0 //////////
output		          		ENET0_GTX_CLK;
input 		          		ENET0_INT_N;
input 		          		ENET0_LINK100;
output		          		ENET0_MDC;
inout 		          		ENET0_MDIO;
output		          		ENET0_RST_N;
input 		          		ENET0_RX_CLK;
input 		          		ENET0_RX_COL;
input 		          		ENET0_RX_CRS;
input 		     [3:0]		ENET0_RX_DATA;
input 		          		ENET0_RX_DV;
input 		          		ENET0_RX_ER;
input 		          		ENET0_TX_CLK;
output		     [3:0]		ENET0_TX_DATA;
output		          		ENET0_TX_EN;
output		          		ENET0_TX_ER;
input 		          		ENETCLK_25;

//////////// Ethernet 1 //////////
output		          		ENET1_GTX_CLK;
input 		          		ENET1_INT_N;
input 		          		ENET1_LINK100;
output		          		ENET1_MDC;
inout 		          		ENET1_MDIO;
output		          		ENET1_RST_N;
input 		          		ENET1_RX_CLK;
input 		          		ENET1_RX_COL;
input 		          		ENET1_RX_CRS;
input 		     [3:0]		ENET1_RX_DATA;
input 		          		ENET1_RX_DV;
input 		          		ENET1_RX_ER;
input 		          		ENET1_TX_CLK;
output		     [3:0]		ENET1_TX_DATA;
output		          		ENET1_TX_EN;
output		          		ENET1_TX_ER;

//////////// TV Decoder //////////
input 		          		TD_CLK27;
input 		     [7:0]		TD_DATA;
input 		          		TD_HS;
output		          		TD_RESET_N;
input 		          		TD_VS;

//////////// USB 2.0 OTG //////////
output		     [1:0]		OTG_ADDR;
output		          		OTG_CS_N;
output		     [1:0]		OTG_DACK_N;
inout 		    [15:0]		OTG_DATA;
input 		     [1:0]		OTG_DREQ;
inout 		          		OTG_FSPEED;
input 		     [1:0]		OTG_INT;
inout 		          		OTG_LSPEED;
output		          		OTG_RD_N;
output		          		OTG_RST_N;
output		          		OTG_WE_N;

//////////// IR Receiver //////////
input 		          		IRDA_RXD;

////////////// EPCS //////////
//output		          		EPCS_ASDO;
//input 		          		EPCS_DATA0;
//output		          		EPCS_DCLK;
//output		          		EPCS_NCSO;


//////////// SDRAM //////////
output		    [12:0]		DRAM_ADDR;
output		     [1:0]		DRAM_BA;
output		          		DRAM_CAS_N;
output		          		DRAM_CKE;
output		          		DRAM_CLK;
output		          		DRAM_CS_N;
inout 		    [31:0]		DRAM_DQ;
output		     [3:0]		DRAM_DQM;
output		          		DRAM_RAS_N;
output		          		DRAM_WE_N;

//////////// SRAM //////////
output		    [19:0]		SRAM_ADDR;
output		          		SRAM_CE_N;
inout 		    [15:0]		SRAM_DQ;
output		          		SRAM_LB_N;
output		          		SRAM_OE_N;
output		          		SRAM_UB_N;
output		          		SRAM_WE_N;

//////////// Flash //////////
output		    [22:0]		FL_ADDR;
output		          		FL_CE_N;
inout 		     [7:0]		FL_DQ;
output		          		FL_OE_N;
output		          		FL_RST_N;
input 		          		FL_RY;
output		          		FL_WE_N;
output		          		FL_WP_N;

//////////// HSMC, HSMC connect to MTLC //////////
//MTL
output		     [7:0]		LCD_B;
output		          		LCD_DCLK;
output		     [7:0]		LCD_G;
output		          		LCD_HSD;
output		          		TOUCH_I2C_SCL;
inout 		          		TOUCH_I2C_SDA;
input 		          		TOUCH_INT_n;
output		     [7:0]		LCD_R;
output		          		LCD_VSD;

output                  LCD_DITH;
output                  LCD_MODE;
output                  LCD_POWER_CTL;
output                  LCD_UPDN;
output                  LCD_RSTB;
output                  LCD_DE;
output                  LCD_SHLR;
output                  LCD_DIM;
//D5M
input		          		   CAMERA_LVAL;
input		          			CAMERA_PIXCLK;
output		          		CAMERA_RESET_n;
output		          		CAMERA_SCLK;
inout		          			CAMERA_SDATA;
input		          			CAMERA_STROBE;
output		        			CAMERA_TRIGGER;
output		        			CAMERA_XCLKIN;
input		    		[11:0]	CAMERA_D;
input		          			CAMERA_FVAL;
//LIGHT SENSOR
output                  LSENSOR_ADDR_SEL;
output                  LSENSOR_SCL;
inout                   LSENSOR_SDA;
input                   LSENSOR_INT;
//G_Sensor
output                  GSENSOR_CS_n;
input                   GSENSOR_INT1;
input                   GSENSOR_INT2;
output                  GSENSOR_ALT_ADDR;
inout                   GSENSOR_SDA_SDI_SDIO;
output                  GSENSOR_SCL_SCLK;


//=======================================================
//  REG/WIRE declarations
//=======================================================
wire                 clk_lcd, clk_touch;
wire         [7:0]   disp_r, disp_g, disp_b;
reg          [7:0]   luma;
wire         [7:0]	 reg_gesture; 
wire                 touch_ready;
wire         [3:0]   y_mode;
wire        [10:0]   hcount;


//=======================================================
//  Sub-modules
//=======================================================
vout_pll 			    u_vout_pll	(
              .inclk0(CLOCK_50),
              .c0(clk_lcd),        //33M  ph 0
              .c1(LCD_DCLK) );     //33M  ph 120

touch_pll 			    u_touch_pll	(
              .inclk0(CLOCK2_50),
              .c0(clk_touch) );    //2K ph 0

seg7_lut_8        u_seg7_lut_8 (	
		          .oSEG0(HEX0),			
		          .oSEG1(HEX1),	
		          .oSEG2(HEX2),	
		          .oSEG3(HEX3),	
		          .oSEG4(HEX4),	
		          .oSEG5(HEX5),	
		          .oSEG6(HEX6),	
		          .oSEG7(HEX7),	
		    //      .iDIG({12'b0, y_mode, SW[15:0]}) );
			 
			       .iDIG({ 6'b0,x_coord,7'b0, y_coord}) );
			 
	wire new_coord;		 
wire itouch_irq;
wire [9:0] x_coord1;
wire [8:0] y_coord1;
wire [9:0] x_coord2;
wire [8:0] y_coord2;
wire [1:0] touch_count;
i2c_touch_config  u_i2c_touch_config (
						  .iCLK(CLOCK_50),
						  .iRSTN(KEY[0]),
						  .iTRIG(!TOUCH_INT_n),
						  .oREADY(touch_ready),
						  .oREG_X1(x_coord1),								
						  .oREG_Y1(y_coord1),								
						  .oREG_X2(x_coord2),								
						  .oREG_Y2(y_coord2),								
						  .oREG_TOUCH_COUNT(touch_count),								
						  .oREG_GESTURE(reg_gesture),								
						  .I2C_SCLK(TOUCH_I2C_SCL),
						  .I2C_SDAT(TOUCH_I2C_SDA) );

						  
touch_control	     u_touch_control (	
	            .iCLK(clk_touch),
	            .iRSTN(KEY[0]),
	            .iREADY(touch_ready),
	            .iREG_GESTURE(reg_gesture),
					.ix1(x_coord1),
					.iy1(y_coord1),
					.ix2(x_coord2),
					.iy2(y_coord2),
					.itouch_count(touch_count),
	            .oButton_state(btn_state) );
					
					

 wire[1:0] DISPLAY_MODE;
 wire [3:0] btn_state;
 assign LEDG[3:0]=btn_state;
 assign LEDG[4]=touch_ready;
 /*touch_irq_detector	inst5(
					.iCLK(clk_touch),
					.iRST_n(KEY[0]),
					.iTOUCH_IRQ(itouch_irq),
					.iREG_GESTURE(reg_gesture),
					.iX_COORD(x_coord),
				//   .iX_COORD(mx_coord),
					.iY_COORD(y_coord),
				 // 	.iY_COORD(my_coord),
					.iNEW_COORD(new_coord),
					.iReady(touch_ready),
					.oDISPLAY_MODE(DISPLAY_MODE),
					.oButton_state(btn_state)
					);
*/
					
					

/*
ycbcr_to_rgb      u_ycbcr_to_rgb (
						  .iCLK(clk_lcd),
						  .iY(luma),
						  .iCb(SW[7:0]),
						  .iCr(SW[15:8]),
						  .oRed(disp_r),
						  .oGreen(disp_g),
						  .oBlue(disp_b) );		
*/					
		
 				
//////////////////////////
wire [10:0] paddle_x;
wire [10:0] X,Y; 
wire clk_200hz,clk_1hz; 

 counter  inst6
(.clk(LCD_VSD), 
 .enable(1'b1), 
 .reset(1'b0),
 .count_up(DISPLAY_MODE),
 .count(paddle_x)
);
 
 
 /*ping_pong inst7
 (.iclk(LCD_VSD),.iRST_N(KEY[3]),.iCursor_X(paddle_x),
 .iCursor_Y(11'h00),.iCoord_X(X),.iCoord_Y(Y),
 .oRed(disp_r),	.oGreen(disp_g),	.oBlue(disp_b)	);*/
 
clock_time(.clk(CLOCK3_50),.clock_200Hz(clk_200hz),.clock_1Hz(clk_1hz));



game inst7
(.clk(CLOCK_50),.slow_clk(clk_200hz),.iRST_N(KEY[0]),.iCoord_X(X),.iCoord_Y(Y),
 .oRed(disp_r),.oGreen(disp_g),.oBlue(disp_b), .iBtn_state(btn_state));

vga_controller	  u_vga_controller (	
		          .iCLK(clk_lcd),
		          .iRSTN(KEY[0]),	
		          .iR(disp_r),
		          .iG(disp_g),
		          .iB(disp_b),
		          .oREAD(),
		          .oVGA_R(LCD_R),
		          .oVGA_G(LCD_G),
		          .oVGA_B(LCD_B),
		          .oVGA_HS(LCD_HSD),
		          .oVGA_VS(LCD_VSD),
		          .oHCOUNT(hcount),
						////////////////
			        	.oCoord_X(X[10:0]),
						.oCoord_Y(Y[10:0])	
				 );
 
//=======================================================
//  Structural coding
//=======================================================
// MTL - display
assign LCD_MODE = 1'b0; //HSD/VSD mode
assign LCD_RSTB = 1'b1; //NO RESET
assign LCD_SHLR = 1'b1; //LEFT-->RIGHT
assign LCD_UPDN = 1'b0; //UP-->DOWN
assign LCD_DIM = 1'b1;
assign LCD_POWER_CTL = 1'b1;


always @ (posedge clk_lcd)
		case (y_mode)
			4'h0   : luma <= hcount[7:0];
			4'h1   : luma <= hcount[8:1];
			4'h2   : luma <= hcount[9:2];
			4'h3   : luma <= hcount[10:3];
			4'h4   : luma <= {hcount[4:3], hcount[4:3], hcount[4:3], hcount[4:3]};
			4'h5   : luma <= {hcount[4:3], hcount[5:3], hcount[5:3]};
			4'h6   : luma <= {hcount[5:4], hcount[6:4], hcount[6:4]};
			4'h7   : luma <= {hcount[6:5], hcount[7:5], hcount[7:5]};
			4'h8   : luma <= {hcount[3:0], hcount[3:0]};
			4'h9   : luma <= {hcount[4:1], hcount[4:1]};
			4'hA   : luma <= {hcount[5:2], hcount[5:2]};
			4'hB   : luma <= {hcount[6:3], hcount[6:3]};
			4'hC   : luma <= {hcount[7:4], hcount[7:4]};
			4'hD   : luma <= {hcount[8:5], hcount[8:5]};
			4'hE   : luma <= {hcount[9:6], hcount[9:6]};
			default: luma <= {hcount[10:7], hcount[10:7]};

		endcase
endmodule
